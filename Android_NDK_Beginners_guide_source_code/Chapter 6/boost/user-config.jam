# Copyright 2003, 2005 Douglas Gregor
# Copyright 2004 John Maddock
# Copyright 2002, 2003, 2004, 2007 Vladimir Prus
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

#   This file is used to configure your Boost.Build installation. You can modify
# this file in place, or you can place it in a permanent location so that it
# does not get overwritten should you get a new version of Boost.Build. See:
#
#   http://www.boost.org/boost-build2/doc/html/bbv2/overview/configuration.html
#
# for documentation about possible permanent locations.

#   This file specifies which toolsets (C++ compilers), libraries, and other
# tools are available. Often, you should be able to just uncomment existing
# example lines and adjust them to taste. The complete list of supported tools,
# and configuration instructions can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/reference/tools.html
#

#   This file uses Jam language syntax to describe available tools. Mostly,
# there are 'using' lines, that contain the name of the used tools, and
# parameters to pass to those tools -- where paremeters are separated by
# semicolons. Important syntax notes:
#
#   - Both ':' and ';' must be separated from other tokens by whitespace
#   - The '\' symbol is a quote character, so when specifying Windows paths you
#     should use '/' or '\\' instead.
#
# More details about the syntax can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/advanced.html#bbv2.advanced.jam_language
#

# ------------------
# GCC configuration.
# ------------------

# Configure gcc (default version).
# using gcc ;

# Configure specific gcc version, giving alternative name to use.
# using gcc : 3.2 : g++-3.2 ;


# -------------------
# MSVC configuration.
# -------------------

# Configure msvc (default version, searched for in standard locations and PATH).
# using msvc ;

# Configure specific msvc version (searched for in standard locations and PATH).
# using msvc : 8.0 ;


# ----------------------
# Borland configuration.
# ----------------------
# using borland ;


# ----------------------
# STLPort configuration.
# ----------------------

#   Configure specifying location of STLPort headers. Libraries must be either
# not needed or available to the compiler by default.
# using stlport : : /usr/include/stlport ;

# Configure specifying location of both headers and libraries explicitly.
# using stlport : : /usr/include/stlport /usr/lib ;


# -----------------
# QT configuration.
# -----------------

# Configure assuming QTDIR gives the installation prefix.
# using qt ;

# Configure with an explicit installation prefix.
# using qt : /usr/opt/qt ;

# ---------------------
# Python configuration.
# ---------------------

# Configure specific Python version.
# using python : 3.1 : /usr/bin/python3 : /usr/include/python3.1 : /usr/lib ;

import feature ;
import os ;

if [ os.name ] = CYGWIN || [ os.name ] = NT {
    androidPlatform = windows ;
} else if [ os.name ] = LINUX {
    if [ os.platform ] = X86_64 {
        androidPlatform = linux-x86_64 ;
    } else {
        androidPlatform = linux-x86 ;
    }
} else if [ os.name ] = MACOSX {
    androidPlatform = darwin-x86 ;
}

modules.poke : NO_BZIP2 : 1 ;
android_ndk = [ os.environ ANDROID_NDK ] ;

# Compilation: ./b2 --without-python toolset=gcc-android4.6_armeabi link=static runtime-link=static target-os=linux architecture=arm --stagedir=android-armeabi threading=multi
using gcc : android4.6_armeabi :
    $(android_ndk)/toolchains/arm-linux-androideabi-4.6/prebuilt/$(androidPlatform)/bin/arm-linux-androideabi-g++ :
    <archiver>$(android_ndk)/toolchains/arm-linux-androideabi-4.6/prebuilt/$(androidPlatform)/bin/arm-linux-androideabi-ar
    <ranlib>$(android_ndk)/toolchains/arm-linux-androideabi-4.6/prebuilt/$(androidPlatform)/bin/arm-linux-androideabi-ranlib
    <compileflags>--sysroot=$(android_ndk)/platforms/android-16/arch-arm
    <compileflags>-I$(android_ndk)/sources/cxx-stl/gnu-libstdc++/4.6/include
    <compileflags>-I$(android_ndk)/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi/include
    <compileflags>-fexceptions
    <compileflags>-frtti
    <compileflags>-march=armv5te
    <compileflags>-mthumb
    <compileflags>-mtune=xscale
    <compileflags>-msoft-float
    <compileflags>-fno-strict-aliasing
    <compileflags>-finline-limit=64
    <compileflags>-D__arm__
    <compileflags>-D__ARM_ARCH_5__
    <compileflags>-D__ARM_ARCH_5T__
    <compileflags>-D__ARM_ARCH_5E__
    <compileflags>-D__ARM_ARCH_5TE__
    <compileflags>-MMD
    <compileflags>-MP
    <compileflags>-MF
    <compileflags>-fpic
    <compileflags>-ffunction-sections
    <compileflags>-funwind-tables
    <compileflags>-fstack-protector
    <compileflags>-no-canonical-prefixes
    <compileflags>-Os
    <compileflags>-fomit-frame-pointer
    <compileflags>-fno-omit-frame-pointer
    <compileflags>-DANDROID
    <compileflags>-D__ANDROID__
    <compileflags>-DNDEBUG
    <compileflags>-D__GLIBC__
    <compileflags>-DBOOST_ASIO_DISABLE_STD_ATOMIC
    <compileflags>-D_GLIBCXX__PTHREADS
    <compileflags>-Wa,--noexecstack
    <compileflags>-Wformat
    <compileflags>-Werror=format-security
    <compileflags>-lstdc++
    <compileflags>-Wno-long-long
        ;

# Compilation: ./b2 --without-python toolset=gcc-android4.6_armeabiv7a link=static runtime-link=static target-os=linux architecture=arm --stagedir=android-armeabi-v7a threading=multi
using gcc : android4.6_armeabiv7a :
    $(android_ndk)/toolchains/arm-linux-androideabi-4.6/prebuilt/$(androidPlatform)/bin/arm-linux-androideabi-g++ :
    <archiver>$(android_ndk)/toolchains/arm-linux-androideabi-4.6/prebuilt/$(androidPlatform)/bin/arm-linux-androideabi-ar
    <ranlib>$(android_ndk)/toolchains/arm-linux-androideabi-4.6/prebuilt/$(androidPlatform)/bin/arm-linux-androideabi-ranlib
    <compileflags>--sysroot=$(android_ndk)/platforms/android-16/arch-arm
    <compileflags>-I$(android_ndk)/sources/cxx-stl/gnu-libstdc++/4.6/include
    <compileflags>-I$(android_ndk)/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi-v7a/include
    <compileflags>-fexceptions
    <compileflags>-frtti
    <compileflags>-march=armv7-a
    <compileflags>-marm
    <compileflags>-mthumb
    <compileflags>-mfpu=vfpv3-d16
    <compileflags>-mfloat-abi=softfp
    <compileflags>-fno-strict-aliasing
    <compileflags>-finline-limit=64
    <compileflags>-D__arm__
    <compileflags>-D__ARM_ARCH_7__
    <compileflags>-D__ARM_ARCH_7A__
    <compileflags>-D__ARM_ARCH_7R__
    <compileflags>-D__ARM_ARCH_7M__
    <compileflags>-D__ARM_ARCH_7EM__
    <compileflags>-D__ARM_ARCH_7S__
    <compileflags>-MMD
    <compileflags>-MP
    <compileflags>-MF
    <compileflags>-fpic
    <compileflags>-ffunction-sections
    <compileflags>-funwind-tables
    <compileflags>-fstack-protector
    <compileflags>-no-canonical-prefixes
    <compileflags>-Os
    <compileflags>-fomit-frame-pointer
    <compileflags>-fno-omit-frame-pointer
    <compileflags>-DANDROID
    <compileflags>-D__ANDROID__
    <compileflags>-DNDEBUG
    <compileflags>-D__GLIBC__
    <compileflags>-DBOOST_ASIO_DISABLE_STD_ATOMIC
    <compileflags>-D_GLIBCXX__PTHREADS
    <compileflags>-Wa,--noexecstack
    <compileflags>-Wformat
    <compileflags>-Werror=format-security
    <compileflags>-lstdc++
    <compileflags>-Wno-long-long
        ;

# Compilation: ./b2 --without-python toolset=gcc-android4.6_x86 link=static runtime-link=static target-os=linux architecture=x86 --stagedir=android-x86 threading=multi
using gcc : android4.6_x86 :
    $(android_ndk)/toolchains/x86-4.6/prebuilt/$(androidPlatform)/bin/i686-linux-android-g++ :
    <archiver>$(android_ndk)/toolchains/x86-4.6/prebuilt/$(androidPlatform)/bin/i686-linux-android-ar
    <ranlib>$(android_ndk)/toolchains/x86-4.6/prebuilt/$(androidPlatform)/bin/i686-linux-android-ranlib
    <compileflags>--sysroot=$(android_ndk)/platforms/android-16/arch-x86
    <compileflags>-I$(android_ndk)/sources/cxx-stl/gnu-libstdc++/4.6/include
    <compileflags>-I$(android_ndk)/sources/cxx-stl/gnu-libstdc++/4.6/libs/x86/include
    <compileflags>-fexceptions
    <compileflags>-frtti
    <compileflags>-fstrict-aliasing
    <compileflags>-funswitch-loops
    <compileflags>-finline-limit=300
    <compileflags>-MMD
    <compileflags>-MP
    <compileflags>-MF
    <compileflags>-ffunction-sections
    <compileflags>-funwind-tables
    <compileflags>-fstack-protector
    <compileflags>-no-canonical-prefixes
    <compileflags>-Os
    <compileflags>-fomit-frame-pointer
    <compileflags>-fno-omit-frame-pointer
    <compileflags>-DANDROID
    <compileflags>-D__ANDROID__
    <compileflags>-DNDEBUG
    <compileflags>-D__GLIBC__
    <compileflags>-DBOOST_ASIO_DISABLE_STD_ATOMIC
    <compileflags>-D_GLIBCXX__PTHREADS
    <compileflags>-Wa,--noexecstack
    <compileflags>-Wformat
    <compileflags>-Werror=format-security
    <compileflags>-lstdc++
    <compileflags>-Wno-long-long
        ;

